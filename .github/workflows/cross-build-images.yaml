name: Paladin Buildx
permissions:
  contents: write
  packages: write
  id-token: write
  
on:
  workflow_call:
    inputs:
      registry:
        required: true
        type: string
      repository:
        required: true
        type: string
      image_tags:
        required: true
        type: string
        description: 'List of image tags separated by comma'
      push:
        required: false
        type: boolean
        default: true
    secrets:
      username:
        required: false
      password:
        required: false

jobs:
  core-macos:
    uses: ./.github/workflows/build-image.yaml
    with:
      dockerfile: ./Dockerfile
      registry: ${{ inputs.registry }}
      image: ${{ inputs.repository }}/paladin
      image_tag: "${{ github.sha }}-arm64"
      push: ${{ inputs.push }}
      platforms: linux/arm64
      runs-on: ubuntu-latest
    secrets:
      username: ${{ secrets.username }}
      password: ${{ secrets.password }}
  core-ubuntu:
    uses: ./.github/workflows/build-image.yaml
    with:
      dockerfile: ./Dockerfile
      registry: ${{ inputs.registry }}
      image: ${{ inputs.repository }}/paladin
      image_tag: "${{ github.sha }}-amd64"
      push: ${{ inputs.push }}
      platforms: linux/amd64
      runs-on: ubuntu-latest
    secrets:
      username: ${{ secrets.username }}
      password: ${{ secrets.password }}

  operator-ubuntu:
    uses: ./.github/workflows/build-image.yaml
    with:
      dockerfile: ./operator/Dockerfile
      registry: ${{ inputs.registry }}
      image: ${{ inputs.repository }}/paladin-operator
      image_tag: ${{ github.sha }}-amd64
      push: ${{ inputs.push }}
      platforms: linux/amd64
      runs-on: ubuntu-latest
    secrets:
      username: ${{ secrets.username }}
      password: ${{ secrets.password }}
  operator-macos:
    uses: ./.github/workflows/build-image.yaml
    with:
      dockerfile: ./operator/Dockerfile
      registry: ${{ inputs.registry }}
      image: ${{ inputs.repository }}/paladin-operator
      image_tag: ${{ github.sha }}-arm64
      push: ${{ inputs.push }}
      platforms: linux/arm64
      runs-on: ubuntu-latest
    secrets:
      username: ${{ secrets.username }}
      password: ${{ secrets.password }}

  core-docker-manifest:
    if: ${{ inputs.push }}
    needs: [core-macos, core-ubuntu]
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ inputs.registry }}/${{ inputs.repository }}/paladin
    steps:
      - uses: actions/checkout@v4

      - name: Set lower case image name
        run: |
          LOWER_IMAGE=${IMAGE,,}
          echo "IMAGE=$LOWER_IMAGE" >> $GITHUB_ENV
          echo "TEMP_IMAGE=$LOWER_IMAGE:$GITHUB_SHA" >> $GITHUB_ENV
          echo "Image: $LOWER_IMAGE"
          echo "Temp image: $LOWER_IMAGE:$GITHUB_SHA"

      - name: Docker registry login
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}

      - name: Create and push core manifest
        env:
          IMAGE_TAGS: ${{ inputs.image_tags }}
        run: |
          IFS=',' read -ra TAG_ARRAY <<< "$IMAGE_TAGS"
          for tag in "${TAG_ARRAY[@]}"; do
            docker manifest create $IMAGE:$tag \
            --amend $TEMP_IMAGE-arm64 \
            --amend $TEMP_IMAGE-amd64
            docker manifest push $IMAGE:$tag
          done

  operator-docker-manifest:
    if: ${{ inputs.push }}
    needs: [operator-macos, operator-ubuntu]
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ inputs.registry }}/${{ inputs.repository }}/paladin-operator
    steps:
      - uses: actions/checkout@v4

      - name: Set lower case image name
        run: |
          LOWER_IMAGE=${IMAGE,,}
          echo "IMAGE=$LOWER_IMAGE" >> $GITHUB_ENV
          echo "TEMP_IMAGE=$LOWER_IMAGE:$GITHUB_SHA" >> $GITHUB_ENV
          echo "Image: $LOWER_IMAGE"
          echo "Temp image: $LOWER_IMAGE:$GITHUB_SHA"

      - name: Docker registry login
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}

      - name: Create and push operator manifest
        env:
          IMAGE_TAGS: ${{ inputs.image_tags }}
        run: |
          IFS=',' read -ra TAG_ARRAY <<< "$IMAGE_TAGS"
          for tag in "${TAG_ARRAY[@]}"; do
            docker manifest create $IMAGE:$tag \
            --amend $TEMP_IMAGE-arm64 \
            --amend $TEMP_IMAGE-amd64
            docker manifest push $IMAGE:$tag
          done
          
